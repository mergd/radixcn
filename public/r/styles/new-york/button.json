{
  "name": "button",
  "type": "registry:ui",
  "dependencies": ["@radix-ui/react-slot", "@radix-ui/themes"],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button as RadixButton } from \"@radix-ui/themes\";\nimport { cva } from \"class-variance-authority\";\nimport { Spinner } from \"@radix-ui/themes\";\nimport { cn } from \"@/lib/utils\";\n\ntype ButtonVariant =\n  | \"default\"\n  | \"destructive\"\n  | \"outline\"\n  | \"secondary\"\n  | \"ghost\"\n  | \"link\"\n  | string;\ntype ButtonSize = \"default\" | \"sm\" | \"lg\" | \"icon\";\n\nconst buttonVariants = cva(\"\", {\n  variants: {\n    variant: {\n      default: \"\",\n      destructive: \"\",\n      outline: \"\",\n      secondary: \"\",\n      ghost: \"\",\n      link: \"\",\n    } as Record<ButtonVariant, string>,\n    size: {\n      default: \"\",\n      sm: \"\",\n      lg: \"\",\n      icon: \"\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"default\",\n  },\n});\n\n// Update variantMap to accept any string\ntype RadixButtonVariant = \"classic\" | \"solid\" | \"soft\" | \"outline\" | \"ghost\";\n\nconst variantMap: Record<string, RadixButtonVariant> = {\n  default: \"solid\",\n  destructive: \"solid\",\n  outline: \"outline\",\n  secondary: \"soft\",\n  ghost: \"ghost\",\n  link: \"ghost\",\n};\n\nconst sizeMap = {\n  sm: \"1\",\n  default: \"2\",\n  lg: \"3\",\n  icon: \"2\",\n} as const;\n\ninterface ButtonProps\n  extends Omit<React.ComponentProps<typeof RadixButton>, \"size\" | \"variant\"> {\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  // Show  spinner alongside children\n  isSpinning?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      variant = \"default\",\n      size = \"default\",\n      color,\n      className,\n      isSpinning,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <RadixButton\n        className={cn(\n          \"cursor-pointer\",\n          variant === \"link\" && \"underline-offset-4 hover:underline\",\n          size === \"icon\" && \"p-1 size-auto\",\n          className,\n        )}\n        ref={ref}\n        variant={variantMap[variant] ?? \"solid\"}\n        size={sizeMap[size as ButtonSize]}\n        color={variant === \"destructive\" ? \"red\" : color}\n        {...props}\n      >\n        <div className=\"flex items-center gap-2\">\n          {isSpinning && <Spinner />}\n          {children}\n        </div>\n      </RadixButton>\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\nexport type { ButtonProps };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
